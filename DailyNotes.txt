

JAVA:
=======



language:
=========
		communication with human
		english,telugu,tamil,kannada,hindi.....

Programming Lanugage:
=====================
		communication with machine
		
		software-->set of programs/instrutions


		POP 									OOP
	B,BCPL,C,COBOL,PASCAL,PHOTON...	      C++,JAVA,.NET,Python.....
		
				performance  		inheritance,polymorphisam
				security			encapsulation,abstraction...
				
				
	Why JAVA?	
			
			1.platform independent
			2.Garbage Collection	-->garbage collector  c,C++
				
				
					WORA    python,net
					
						windows11
						machine1  java app			
					
					
			window7			linux
			machine2		machine3
			  A					B
			  
			  pyc
					java 21	 java 22
			  
			java installation  sun micro system--->oracle  corporation
			
				1996 JDK 1.0		James Gosling
			
				
					JDK 22		OAK
					
					JAVA 8 
					
											JAVA
					JSE						 JEE											JME	
				corejava,swings,applets...	Servlets,JSP,spring(framework),webservices		android
							
			1.standalone apps/desktop apps   vlc mediaplayer,anti virus	
					
			2.web apps								
			
			3.Distributed apps		
				
			4.mobile apps
					
				java	
					JDK--->JRE-->JVM(execute)
					
					
	Welcome to java 


	Welcome.java 
	class Welcome
	{
	public static void main(String args[])
	{
	
	}
	
	}
	1.classnames/interfaces must start start uppercase letter ex:TestExample,HashMap,LinkedHashMap
	2.methods/variables should start with lowercase and rest of the words uppercase Ex:addOfTwo(),ageOfPerson
	

Identifiers:
============
	any  name in java will call it as identifier
	
		variable name,methodname,classname ,interface ,label.....


	a-z
	A-Z
	0-9
	$
	_


Variables/Data Types:
===================== static typed PL

	variable is a name of memory location
	
	syntax:
			datatype varname=value; 
			
				datatype varname;//declaration
				varname=value;//intialization
				
				
				
				Premitive DT		     NPDT
			8							String,student,emp,arr...	
				
		byte    1 byte    -128 to 127
		short	2 bytes	 -32768 to 32767		number
		int     4 bytes	 -2147483648 to 2147483647
		long    8 bytes  9223372036854775808  to  9223372036854775807
		
		float   4 bytes		float salary=12.21332143564565f; 5-6 
		double  8 bytes     14-15 decimal 
		
		boolean	1 bit true-1 false-0		
		char    2 bytes english-->ASCII
						UNICODE-->18 
		
				
					long aadhar=92384023848032; 7 bytes
				
				
				local -->the variable defined inside the method
				
				global-->the variable defined outside the method
				
				
Flow Control Statements:
=======================
					if
					else
					switch
					for
					while
					do
					case
					default
					break
					continue
				
				
		IDE		--->eclipse,netbeans,myeclipse,vscode,intellji...
				
				
				
				





Arrays:
=========
	used to group values
	i can hold only similar values

	int marks=123;
		int marks1[]= {12,32,12,54,66,33,97};//0,1,2,3,4,5,6  array literal--smilar type
		int marks2[]=new int[5];//0
		marks2[0]=123;
		marks2[1]=22;
		marks2[3]=54;
		
		System.out.println(marks1[3]);
		System.out.println(marks2[3]);
		System.out.println(marks2[5]);//AIOE
		System.out.println(marks);
		
java-->keywords-->53--->lowercase 


instance and static :
=====================
	
		local
		
		global--instance and static
		
	
	syntax
		we will use static keyword  to define static properties(variable,method,block)
		if there is no static keywrod that is instance/non-static
	

	memory
		static variable will get memory only once at the time of class loading into JVM.
		instance variable will get memory for every object creation
		
		class--collection of data members and member functions
			object -->instance of a class
		
			classname objname=new classname();
			Test obj=new Test();
	
	Access
		static properties can be accessed by using class name
		instance  properties can be accessed by using obj name
	
	
	
	Usage
		contryname,orgname,schoolname...

		for common data where one time memory is enough will go with static.
		for unique data where different memory is required for every instance will go with instance.
		
		
		
methods		
		it is block of statements
		
		
package(folder)	,import

package com.ericsson.corejava



NOTE:
1)By default package for every java file is java.lang
2)By Default parent class for every java class is java.lang.Object
		
Scanner/dynamic input		java.util
		
	public class Test {
public static void main(String[] args) {//"12",13
	//wrapper clsses 8 DT 8
	int a=Integer.parseInt(args[0]);
	int b=Integer.parseInt(args[1]);
	int result=a+b;
	System.out.println("Add of two numbers :"+result);
}
}
	
OOPS:
======		
1)Inheritance
2)Polymorphisam
3)abstraction
4)encapsualtion
		
		
					
		Inheritance:
		============	Code Reusability
		extends,implements
		
		class Test		//parent
		{
		
		200 methods
		
		}
					
		class Hello extends Test{ //child
		
		
		
		}		
					
					
				
		Java Doesnt support multiple inheritance through classes
		Java  support multiple inheritance through interfaces
		
			  
			  
abstract methods:without implementation/body/logic
concrete methods:with implementation/body/logic (non-abstract)			  
			  
			  
			  
		public abstract void m1();	  -->abstraction-->hiding
						  
							class				-->only concrete/implemented methods		  
			0-100%			abstract classes 	-->combination of both abstract and concrete methods
			100%			interfaces			-->only abstract methods
			  
								by default interface methods are public abstract
								by default interface variables are public static final
			  
			  
			  
			  
			  
			  
			  X						Y
			  class Parent1         class Parent2
			  {						{
			  
			  m1()					m1()
			  
			  
			  
			  
			  }						}
					
			Z		
			class Child extends Parent1,Parent2
			{
			
			
			Child child =new Child();
			child.m1();//confused
			
			}
polymorphisam,Encapsulation,public,private,protected,default,final,this,super,constructor


polymorphisam:-
==============

				method overloading/compile time polymorphisam/static binding
				method overriding/run time polymorphisam/dynamic binding
					
					
		method overloading:
			
				method name is same but signature is different.
				
										no of params
										order of params
										type of params
		method overriding:
		==================
				method name is same but implementation/body/logic is different
					
					
			class Parent{
			1000 methods
			
			}		
			class Child{
			
			
			}	
				
				@Override
	
final keyword can be used before the variable,method,class	
				
				final variables are fixed ,we cannot change the value of final variable
				final methods ,we cannot override the final methods
				final classes,extending final classes not possible
				
				
				
				
constructor:
============
			intialization of object
			
			int a;
			a=12;
	
	
	
	classname objname=new classname();
	classname objname=new constructor();
	class Test{
	
	public int add(int a,int b)
	{
	return a+b;
	}
	
	main()
	{
	Test test =new Test();
	test.add(12,23);
	
	}
	
	
	}
this,super

this ,which is used to represent current class properties(variable,method,constructor,object)
super ,which is used to represent parent class properties(variable,method,constructor)

				
public,private,protected,default:
===================================				
				
		public :every where 
		private:class level scope
		default:package level scope
		protected:package level scope and outside the package when ever it is child we can access
				
Encapsulation:
==============
	wrapping up of the data and its corresponding  behaviour together 
		
		

String,StringBuffer,StringBuilder:	java.lang
==================================
		String is imuttable
		StringBuffer,StringBuilder are muttable

		StringBuffer methods are  synchronized(thread safe)
		StringBuilder methods are not synchronized(no thread safe)
		

		String orgname="";//literal
		
		String name=new String("");
		
		once we declared string we cannot change the value



			public void m1()
			{										theards
			.										t1,t2,t3
			.
			.
			.
			
			}

			public synchronized void m1()
			{
			.
			.
			.
			.
			
			}

	String:
	======literal
	heap area-->String constant pool
	
		
			-->duplicates are not allowed 





Assignments


corejava basics -->3


Exception Handling:
====================

the problems without exception handling

		1)system defined error messages
		2)abnormal termination



the advantages with exception handling

		1)user friendly  error messages
		2)normal termination


		try,catch,finally,throw,throws


		
NOTE:
1)By default package for every java file is java.lang
2)By Default parent class for every java class is java.lang.Object
3)By Default parent class for every Exception class is java.lang.Throwable




1)extends Exception/RuntimeException/Throwable
2)param constructor




File IO/Stream IO

stream-->flow of data

			variables,arrays,object,collections--not permanant
			
			files,database					   -->permanant



		java<--->File

java.io

	streams
	
	charcter stream		FileWriter,BufferedWriter,PrintWriter,FileReader,BufferedReader
	buffered stream		BufferedOutputStream,BufferedInputStream  1024 bytes
	byte stream			FileOutputStream,FileInputStream			2 bytes
	data stream			DataInputStream,DataOutputStream
	object stream		ObjectOutputStream,ObjectInputStream   java object
	

			java object --->byte data-->serialisation

Collections Framework:
=======================

variables-->one value

arrays--->group of value

		1.arrays will allow similar data 
		2.fixed in size   AIOE/not growable in  nature 
		3.no utility methods
		
	Advantages with collections
	
		1.homogeneous and haterogenous objects 
		2.not fixed in size / growable in nature   AL-10,-->16(cc*3/2)+1
		3.lots of utility methods
		
			
										Collection		-->java.util
		
							List 			Set				Queue
		1.duplicates are allowed
		2.insertion order is followed
		
					LinkedList
					ArrayList-->not synchronized
					Vector-->synchronized
					Stack--->FILO
		
		
		In Every collection class we can store both homogeneous and heterogeneous data except treeset and treemap
		
			
			compareTo-->Comparable(I)
			
			Interface-->collection of abstract methods
			marker Interface--->zero abstract methods(empty interface)ex:Serializable
			Functional Interface-->SAM-->Single abstract method:Comparator/Comparable/Runnable
		
		
		
		
		returns -ve if obj1 has to come before obj2
		returns +ve if obj1 has to come after obj2  1
		returns 0 if both are same


	 java.lang.Comparable-->FI-->compareTo-->NSO
	 java.util.Comparator-->FI-->compare-->CSO

Queue(I):FIFO
	
		PriorityQueue
		PriorityBlockingQueue


MAP:
====
		key,value-->entry	

				key and value can be any DT
				
				key must be unique and value can be duplicate
				
				studId  		studName--->Entry-->key,value
				123				 mahesh
				
				
				HashMap			duplicate keys are not allowed,values can be duplicate and insertion order is  not followed.
				
				LinkedHashMap  duplicate keys are not allowed,values can be duplicate and insertion order is  followed.
				
				SM/NM/TreeMap 	duplicate keys are not allowed,values can be duplicate and insertion order is  not followed 
								but it follows sorting order of keys.
				
				
				
					
		Employee
		empid		private
		empname
		salary
		designation
		location
		
	public
	
10 employee-->collections
			main
			collection-->
			
			
				123/sandeep
				
				
				
	1)display the Employee details based on id or name   
	
	
	2)display the names of employees who are getting the salary greater than the 60000			
				
				
	3) display the max salary			
				
	4)display the sum of salaries of all the employees			
				
	5)display the names of all employees who are working in 'Pune'			
				
	6)DISPLAY ALL EMPLOYEES BASED ON SALARY ASCENDING			
				
	7)display all employees who are working as managers	

	8)display the sum of salaries of employees who are working as managers
	
	9)display the ids of all employees
				
				
				
Threads:
=======				
				
		multi tasking:executing several tasks simultaniously

		Process based multi tasking:OS
			executing several tasks simultaniously where each and every task is seperate independent process
		thread based multi tasking /multi threading
			executing several tasks simultaniously where each and every task belongs to same process
			process:it is a collection of threads
			thread: it is smallest unit of process
				
				
				
	thread based multi tasking /multi threading			
				
			two ways

			1.implements Runnable
			2.extends Thread 
				
				
Thread life cycle

sleep()
start()
run()
currentThread()
setName()
getName()
setPriority()
getPriority()
wait()
notify()
notifyAll()
yield()
synchronized keyword


1....100

even-->2,4,6,8,....100 -->2,wait(),notify(),4
odd -->1,3,5,7,9....99	-->1,wait(),3,wait(),notify()

1,2
				
Product	Management App			
	1.ADD Product
	2.Update product
	3.Delete product
	4.Get Product			
	5.Get All Products
	6.Get Products between the prices
	7.get products by category
	8.exit
				
				
				
	variables-->arrays-->Collections	
				
				
		 List list = Collections.synchronizedList(new ArrayList(...));		
				
			Map m = Collections.synchronizedMap(new HashMap(...));	no performance
				
			SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));	
			
			
			concurrent collections
			
			HashMap--16	--->no thread safety
			
			ConcurrentHashMap
			
					thread safety-->bucket level locking/segment level locking
					performance
			
			
			
			Collections
			String/SB/SB
			exception handling
			instance/static
			oops
			
Java 8 Features:
================			
			
			100 lines 
			
		functional programming-->day-1 1993 python	50 lines
			
			
			2014 -->functional programming
			
			
	lambda Expressions		
			
	Functional INTERFACES

	method reference/constructor reference ::
	
	default and static methods
	
	predefined FI 40+
	
	Date and Time  LocalDate
	
	stream api
	
	optional class
	
			
			
			
	Lambda Expressions:
==========================	
			
			
			accessmodifer return type static/instance methodname(parameterDT paramname,....)
			{
			.
			.
			.
			.
			return null;
			}
			
			public int add(int a,int b)
			{
				return a+b;
			}
			anonymous function/name less
			
			1.no access modifier
			2.no method name
			3.return keyword is optional
			4.curly braces are optional
			5.parameter datatypes are optional when they are same datatype
			6.paranthesis are also optional where we have one param
			7.return keyword with curly braces mandatory
			
			
			  (a,b)->a+b;
			
			Test
			public int squareIt(int a)
			{
				return a*a;
			}
			
			a->a*a;
			
			public void printLength(String name)
			{
			System.out.println(name.length);
			}
			
			
			name->System.out.println(name.length);
			
		Functional Interfaces :	SAM
		
		default and static methods
		
		@Override
		
		@FunctionalInterface
		
		java.util.function
	
		Predicate--->test()-->parameter can be anything return type  boolean
	IntPredicate
		Function -->apply()-->parameter can be anything and return type can anything
		Consumer -->accept()-->no return but parameter can be anything
		Supplier -->get()
		https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html
		::
		
	Stream API:
	==========
	
		stream -->flow of data
			
			
			
			list.stream()
			
			
			intermediate
			terminal
			
			input-->stream()-->operation1--->operation2-->terminal -->stream()
			
	Database	-->JDBC
	
	case study  --->Collections
			
		Product	Management App			
	1.ADD Product
	2.Update product
	3.Delete product
	4.Get Product			
	5.Get All Products
	6.Get Products between the prices
	7.get products by category
	8.exit	
	
	Layered Architecture:
	===================
	
			presentation layer-->user interaction code
			
			
			Service layer/busines logic layer -->main logic
			
												DTO/POJO
			repository layer/DAO layer
	
	
	
	Files:
	DATABASE:
			RDBMS     NOSQL
			
			oracle,db2,mysql,postgres.....
			
			tables-->rows and columns
			
			https://dev.mysql.com/downloads/installer/
			
#DDl-->create,alter,drop,truncate,rename
#DML-->Insert,update,delete
#DRL-->select
#constraints
#joins
#functions


DDL:
-------create,alter,drop,truncate,rename


constraints:
===============


eid 	ename	 	esal 		edesg 	 	deptno	 	deptname 	 deptloc
1		X			2300		admin		 10			 sales		  hyderabad	
2		Y			3200		hr			 20			 marketing	  delhi	
3		Z			1230		hr			 20			 marketing	  delhi	
4		A			3211		developer	 30			 programming  mumbai	
5		B			9010		developer	 30			 programming  mumbai
6		C			2122		admin		 10			 sales		  hyderabad


dept
		pk
	 deptno	 	deptname 	 deptloc
	 10			 sales		  hyderabad	
	 20			 marketing	  delhi		
	 30			 programming  mumbai
	 
	 
employees
											FK
eid 	ename	 	esal 		edesg 	 	deptno	 	
1		X			2300		admin		 10			 
2		Y			3200		hr			 20			 
3		Z			1230		hr			 20			 
4		A			3211		developer	 30			 	
5		B			9010		developer	 30			 
6		C			2122		admin		 10			 

drop database ericsson;
create database ericsson;
use ericsson;
#DDl-->create,alter,drop,truncate,rename
create table employees(empid int,ename varchar(20),esal float,desg varchar(20));
alter table employees add column eadd varchar(20);
describe employees;
alter table employees drop eadd;
alter table employees change empid eid int;
alter table employees rename to emps;
truncate table emps;#empty
drop table emps;
create table emps as select * from employees;
create table emps1 as select * from employees where 1=2;

#DML-->Insert,update,delete
insert into employees values(1,"suresh",9000,"developer");
insert into employees values(2,"mahesh",21111,"trainer");
insert into employees values(3,"rajesh",22200,"admin");
insert into employees values(4,"naresh",32222,"hr");
insert into employees values(5,"hitesh",90000,"admin");
insert into employees values(6,"kumar",85000,"developer");
insert into employees(empid,ename)values(7,'sandeep');
update employees set esal=esal+5000;
update employees set esal=esal+2000 where desg="developer";
alter table employees add address varchar(10);
update employees set address='hyderabad' ;
delete from employees;
delete from employees where empid=1;
truncate table employees;
select * from employees;
select empid,ename from employees;
select * from employees where desg='admin';
select * from employees group by desg;
select max(esal) from employees;
select min(esal) from employees;
select avg(esal) from employees;
select count(esal) from employees;
select sum(esal) from employees;
select * from employees order by esal desc;
insert into employees(empid,ename)values(7,'sandeep');


insert into employees values(1,"suresh",9000,"developer","hyderabad");
#notnull,check,unique,primary key,foreign key

create table emp_info(empid int primary key,ename varchar(20) not null,esal float check(esal>10000),desg varchar(20));

insert into emp_info values(1,"suresh",19000,"developer");
insert into emp_info(empid,esal) values(2,19000);
#DRL-->select
#constraints
#joins
#functions

drop table dept;
drop table emp;

CREATE TABLE dept(
    deptno INT,
    dname VARCHAR(14),
    loc VARCHAR(13),
	constraint pk_dept primary key (deptno)
);
INSERT INTO dept(deptno, dname, loc) VALUES
(10, 'ACCOUNTING', 'NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30, 'SALES', 'CHICAGO'),
(40, 'OPERATIONS', 'BOSTON');


CREATE TABLE emp(
    empno INT,
    ename VARCHAR(10),
    job VARCHAR(9),
    mgr INT,
    hiredate DATE,
    sal DECIMAL(7,2),
    comm DECIMAL(7,2),
    deptno INT,
   constraint pk_emp primary key (empno),
   constraint fk_deptno foreign key (deptno) references dept (deptno)
);

INSERT INTO emp VALUES
(7839, 'KING', 'PRESIDENT', null, '1981-11-17', 5000, null, 10),
(7698, 'BLAKE', 'MANAGER', 7839,'1981-05-01', 2850, null, 30),
(7782, 'CLARK', 'MANAGER', 7839, '1981-06-09', 2450, null, 10),
(7566, 'JONES', 'MANAGER', 7839, '1981-04-02',2975, null, 20),
(7788, 'SCOTT', 'ANALYST', 7566, '1981-04-19',3000, null, 20),
(7902, 'FORD', 'ANALYST', 7566, '1981-03-12', 3000, null, 20),
(7369, 'SMITH', 'CLERK', 7902,'1980-12-17', 800, null, 20),
(7499, 'ALLEN', 'SALESMAN', 7698,'1981-02-20', 1600, 300, 30),
(7521, 'WARD', 'SALESMAN', 7698, '1981-02-22',1250, 500, 30),
(7654, 'MARTIN', 'SALESMAN', 7698,'1981-09-28',1250, 1400, 30),
(7844, 'TURNER', 'SALESMAN', 7698,'1981-09-08',1500, 0, 30),
(7876, 'ADAMS', 'CLERK', 7788, '1987-05-23',1100, null, 20),
(7900, 'JAMES', 'CLERK', 7698,'1981-03-12',950, null, 30),
(7934, 'MILLER', 'CLERK', 7782,'1982-01-23',1300, null, 10);

select * from emp;
select * from dept;
delete from dept  where deptno=30;

drop table emp;
drop table dept;

select ename,sal from emp;
select e.ename,e.sal,d.dname from emp e ,dept d;#cross join
select e.ename,e.sal,d.dname from emp e ,dept d where e.deptno=d.deptno;#inner join
insert into emp(empno,ename,sal) values(12,'sandeep',9000);
select e.ename,e.sal,d.dname from emp e left outer join dept d on e.deptno=d.deptno;#left outer join
select e.ename,e.sal,d.dname from emp e right outer join dept d on e.deptno=d.deptno;#left outer join





spring framework:
==================	
	spring is non-invasive framework ,which is used to create light weight and loosley coupled applications		
		framework	
			invasive		:Struts,it will force developer to implement predefined api
			non-invasive	:spring ,hibernate:it will never force developer to implement predefined api
			
			light weight 
			heavy weight 
			
			
			loosley coupling
			tightly coupling
			
			
			
			
			servlet
			1) implement Servlet
			2)extends GenericServlet
			3)extends HttpServlet   12 methods
			
			1000*12
			class Login extends HttpServlet
			{
			
			
			}
			//heavy weight 
			//light weight 
			
			
			EJB--->Rod JOhnson  2003 1.x
			
									 6.x
			
			
			loosley coupled
			
		object life cycle -->container -->BeanFactory,ApplicationContext
	
			1)Creation of object
			2)wiring the objects
			3)configuraing the objects
			4)Destroying the object
	
	
	
	class Test			config file
							xml				container
							annotation
							java config
	
	class Client
	
		Test test=
	
		
		spring modules
		SPRING CORE	/dependency injection module/IOC
		spring jdbc		-->loosley coupled(queries)
		spring orm/jpa  -->jpa(light weight),tigtly coupled
		spring web
		spring aop
		spring security
		spring rest
		....
					<beans><bean id, class autowire,primary>
		Setter Injection		<property name="" value,ref>
		constrctor injection	<constructor-arg>
		autowiring
		
			autowire
		
		
		xml-->annotation
		
		@Override
		@FunctionalInterface
		
		
		@Component/@Serivce/@Repository/@Controller  <bean autowire class=>
		@Scope("prototype")
	class Employee{
	
	@Autowired //by type
	@Qualifier
	Address address;		@Primary @Scope @Value @ComponentScan("com.ericsson")@Configuration
	
	@Autowired //byname
	setter method
	
	@Autowired
	constrctor
	}	
		@Component
	class Address{
	
	
	}		
		
		
		
	BeanFactory is lazy 

	ApplicationContext is eager
		
		
		
		Java config
		@Bean<bean>
		
NOTE:
spring has given annotations for user defined classes but not for predefined classes
															like entitymaneger,transaction,datasource,server
		
		
		Spring boot -->AutoConfiguration
		
		
		
		JAVA---->Database 
		
		sun micro system--->jdbc api
		
		java.sql
		
		5 steps
		
		
		loading the driver class
		creating the connection
		create statement
		execute query
		close the connection
		
		
		JDBC
		1)table creation
		2)all the queries
		3)checked exceptions
		4)boiler plate code
		
		jpa  java persistence api-->specification
		1)no table creation
		2)no queries/Db Independent queries
		3)un-checked exceptions
		4)2-3	
		
	JPA	implementation ORM tools(Object relational mapping)
					hibernate,eclipselink,toplink,ibatis....
		

	JPA 	
		
		persistence.xml
		
		database properties
				url
				username
				password
				driver class
		
		hibernate properties
				dialect class
				hbm2ddlauto
				show_Sql
				
				
<persistence xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
<persistence-unit name="mysql" transaction-type="RESOURCE_LOCAL">
<properties>
<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/cts"/>
<property name="javax.persistence.jdbc.user" value="root"/>
<property name="javax.persistence.jdbc.password" value="rpsconsulting"/>
<property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/>
<property name="hibernate.hbm2ddl.auto" value="create"/>
<!--  create/update  -->
<property name="hibernate.show_sql" value="true"/>
</properties>
</persistence-unit>
</persistence>


frameworks

MYSQL-->db dependent query

select eid,ename from emps_india;		MYSQL
select empId,empName from Employee;		JPQL


JPQL -->db independent query


Relationship-->

has-a-->association
	aggregation composition


class Employee
{

@OnettoOne
private Address adress;//has-a
}


corejava
database
spring core
jdbc
jpa

spring:
		configuration
		server
		maven dependencies

		hibernate/jpa/database/spring/springorm/server/java/junit
Spring boot
		
		1)auto configuration	:most of the commonly used classes already configured by the spring boot
		2)embeded server(tomcat)
		3)starters		maven dependecies		starter parent
		4)actuators  health/metrics/beans.... insite about project  actuator
		5)in memory DB H2		


	spring tool suite-->eclipse
	
spring boot 3.x-->STS-->spring starter project

STS

8080




REST

Webservices:
============
 it is a technology which is used to make communication between two interoperable apps

			Bank App<---->SBI ATM--> rbl atm card

			phonepe--->apps
			
			
			webservices


RMI,EJB,SP     --->JAVA

DCOM		  --->.net

RPC			  ---> c/C++

CORBA		  -->failed

webservices  --->interoperable

		SOAP-
		REST

webservices-->architecture

API-->packages-->interfaces,classes

JPA--api

springbootrestjpahibernate

hikari datasource




	public abstract String addProduct(Product product);

	public abstract Product updateProduct(Product product);

	public abstract String deleteProduct(int productId);

	public abstract Product getProduct(int productId);

	public abstract List<Product> getAllProducts();

	public abstract List<Product> getProductsBetween(float intialPrice, float finalPrice);

	public abstract List<Product> getProductsByCategory(String productCategory);












spring.datasource.url=jdbc:mysql://localhost:3306/ericsson
spring.datasource.username=root
spring.datasource.password=rpsconsulting
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true



{
    "productId":123,
    "productName":"samsung",
    "productPrice":23450,
    "productCategory":"electronics",
    "productQunatity":20
}